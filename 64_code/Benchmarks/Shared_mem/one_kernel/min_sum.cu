/*===================================================================================
	MIN_SUM.C
=====================================================================================

Contains:
  -> Procedures for simulating MIN-SUM algorithms

Written by: Oscar Ferraz from the code of Marco Alexandre Cravo Gomes 
			University of Coimbra - Electrical Engineering and Computer Department
			
			email: <oscar.ferraz@co.it.pt>
			
Date: March 2023
=====================================================================================*/



//==============================================//
// I N C L U D E S								//
//==============================================//
//---------------------- ANSI C
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <float.h>
#include <string.h>
#include <time.h>
#include <assert.h>
#include <errno.h>
#include <helper_cuda.h>
#include <cuda_runtime.h>  

#ifdef CODE64
    #define N 128
    #define M 64
    #define EDGES 512
#endif

#ifdef CODE128
    #define N 256
    #define M 128
    #define EDGES 1024
#endif

#ifdef CODE256
    #define N 512
    #define M 256
    #define EDGES 2048
#endif


#define MAX_ITER 5




__constant__ unsigned char d_LUT_VN[EDGES];
#ifdef CODE256
    __constant__ unsigned short d_LUT_CN[EDGES];
#else
    __constant__ unsigned char d_LUT_CN[EDGES];
#endif

__global__ void GPU_min_sum(unsigned char * d_LPi);


struct timespec start, end;		  

//**************************************************************************************************
//global memory
__global__ void GPU_min_sum(unsigned char * d_LPi){

    __shared__ unsigned short s_sindrome[M];
    __shared__ unsigned char s_LPi[N];
    __shared__ unsigned char s_wrong_equations[N];
    __shared__ unsigned char teta[1];
    __shared__ unsigned char bar[1];
        
	unsigned char num_iter;
	unsigned short k;

    s_LPi[threadIdx.x]=d_LPi[threadIdx.x];
    teta[0]=0;
    bar[0]=5;

	for(num_iter=0; num_iter<MAX_ITER;num_iter++){ 
        
        if(threadIdx.x==0){
            if(teta[0] && bar[0] > 1){

                bar[0] = bar[0] - 1;
            }
            teta[0]=1;
        }
        __syncthreads();


        if(threadIdx.x<M){
            k=threadIdx.x*8;
            unsigned short sum=0;
            for(unsigned char j=0; j<8;j++){ 
                sum=sum+s_LPi[d_LUT_CN[k+j]];
            }
            s_sindrome[threadIdx.x]=sum & 0x1;
            //printf("sum=%d\n", sum);
            //printf("sindrome[%d]=%d\n", i, sindrome[i]);  
        }
        __syncthreads();

        
        if(threadIdx.x<M){
            k=threadIdx.x*5;
            
            unsigned short sum=0;
            for(unsigned char j=0; j<5;j++){ 
                sum=sum+s_sindrome[d_LUT_VN[k+j]];
            }
            s_wrong_equations[threadIdx.x]=sum;
        }

        if(threadIdx.x>(M-1)){
            k=5*M+(threadIdx.x-M)*3;

            unsigned short sum=0;
            for(unsigned char j=0; j<3;j++){ 
                sum=sum+s_sindrome[d_LUT_VN[k+j]];
            }
            s_wrong_equations[threadIdx.x]=sum;
        }
        __syncthreads();

		
        if(s_wrong_equations[threadIdx.x]>=bar[0]){
            if(s_LPi[threadIdx.x]==0){
                s_LPi[threadIdx.x]=1;
            }
            else{
                s_LPi[threadIdx.x]=0;
            }
            teta[0]=0;
            
        }
        __syncthreads();
			//printf("sindrome[%d]=%d\n", i, L[i]);
	}
    d_LPi[threadIdx.x]=s_LPi[threadIdx.x];

} 


/*************************************************************************************************************/
/*																											 */
/*  M A I N   P R O G R A M																					 */		
/*																											 */
/*************************************************************************************************************/
int  main(){

    #ifdef CODE64
        unsigned char LUT_VN[EDGES]={0,9,26,44,48,1,10,27,45,49,2,11,28,46,50,3,12,29,47,51,4,13,30,32,52,5,14,31,33,53,6,15,16,34,54,0,7,17,35,55,1,8,18,36,56,2,9,19,37,57,3,10,20,38,58,4,11,21,39,59,5,12,22,40,60,6,13,23,41,61,7,14,24,42,62,8,15,25,43,63,14,16,17,47,63,15,17,18,32,48,0,18,19,33,49,1,19,20,34,50,2,20,21,35,51,3,21,22,36,52,4,22,23,37,53,5,23,24,38,54,6,24,25,39,55,7,25,26,40,56,8,26,27,41,57,9,27,28,42,58,10,28,29,43,59,11,29,30,44,60,12,30,31,45,61,13,16,31,46,62,2,16,32,33,55,3,17,33,34,56,4,18,34,35,57,5,19,35,36,58,6,20,36,37,59,7,21,37,38,60,8,22,38,39,61,9,23,39,40,62,10,24,40,41,63,11,25,41,42,48,12,26,42,43,49,13,27,43,44,50,14,28,44,45,51,15,29,45,46,52,0,30,46,47,53,1,31,32,47,54,10,31,34,48,51,11,16,35,49,52,12,17,36,50,53,13,18,37,51,54,14,19,38,52,55,15,20,39,53,56,0,21,40,54,57,1,22,41,55,58,2,23,42,56,59,3,24,43,57,60,4,25,44,58,61,5,26,45,59,62,6,27,46,60,63,7,28,47,48,61,8,29,32,49,62,9,30,33,50,63,16,37,50,17,38,51,18,39,52,19,40,53,20,41,54,21,42,55,22,43,56,23,44,57,24,45,58,25,46,59,26,47,60,27,32,61,28,33,62,29,34,63,30,35,48,31,36,49,0,32,63,1,33,48,2,34,49,3,35,50,4,36,51,5,37,52,6,38,53,7,39,54,8,40,55,9,41,56,10,42,57,11,43,58,12,44,59,13,45,60,14,46,61,15,47,62,3,16,48,4,17,49,5,18,50,6,19,51,7,20,52,8,21,53,9,22,54,10,23,55,11,24,56,12,25,57,13,26,58,14,27,59,15,28,60,0,29,61,1,30,62,2,31,63,0,25,45,1,26,46,2,27,47,3,28,32,4,29,33,5,30,34,6,31,35,7,16,36,8,17,37,9,18,38,10,19,39,11,20,40,12,21,41,13,22,42,14,23,43,15,24,44};
        unsigned char LUT_CN[EDGES]={0,7,18,46,54,80,109,112,1,8,19,47,55,81,110,113,2,9,20,32,56,82,111,114,3,10,21,33,57,83,96,115,4,11,22,34,58,84,97,116,5,12,23,35,59,85,98,117,6,13,24,36,60,86,99,118,7,14,25,37,61,87,100,119,8,15,26,38,62,88,101,120,0,9,27,39,63,89,102,121,1,10,28,40,48,90,103,122,2,11,29,41,49,91,104,123,3,12,30,42,50,92,105,124,4,13,31,43,51,93,106,125,5,14,16,44,52,94,107,126,6,15,17,45,53,95,108,127,6,16,31,32,49,64,96,119,7,16,17,33,50,65,97,120,8,17,18,34,51,66,98,121,9,18,19,35,52,67,99,122,10,19,20,36,53,68,100,123,11,20,21,37,54,69,101,124,12,21,22,38,55,70,102,125,13,22,23,39,56,71,103,126,14,23,24,40,57,72,104,127,15,24,25,41,58,73,105,112,0,25,26,42,59,74,106,113,1,26,27,43,60,75,107,114,2,27,28,44,61,76,108,115,3,28,29,45,62,77,109,116,4,29,30,46,63,78,110,117,5,30,31,47,48,79,111,118,4,17,32,47,62,75,80,115,5,18,32,33,63,76,81,116,6,19,33,34,48,77,82,117,7,20,34,35,49,78,83,118,8,21,35,36,50,79,84,119,9,22,36,37,51,64,85,120,10,23,37,38,52,65,86,121,11,24,38,39,53,66,87,122,12,25,39,40,54,67,88,123,13,26,40,41,55,68,89,124,14,27,41,42,56,69,90,125,15,28,42,43,57,70,91,126,0,29,43,44,58,71,92,127,1,30,44,45,59,72,93,112,2,31,45,46,60,73,94,113,3,16,46,47,61,74,95,114,0,17,41,48,61,78,81,96,1,18,42,49,62,79,82,97,2,19,43,50,63,64,83,98,3,20,44,48,51,65,84,99,4,21,45,49,52,66,85,100,5,22,46,50,53,67,86,101,6,23,47,51,54,68,87,102,7,24,32,52,55,69,88,103,8,25,33,53,56,70,89,104,9,26,34,54,57,71,90,105,10,27,35,55,58,72,91,106,11,28,36,56,59,73,92,107,12,29,37,57,60,74,93,108,13,30,38,58,61,75,94,109,14,31,39,59,62,76,95,110,15,16,40,60,63,77,80,111};
    #endif

    #ifdef CODE128
        unsigned char LUT_VN[EDGES]={0,1,36,88,110,1,2,37,89,111,2,3,38,90,112,3,4,39,91,113,4,5,40,92,114,5,6,41,93,115,6,7,42,94,116,7,8,43,95,117,8,9,44,64,118,9,10,45,65,119,10,11,46,66,120,11,12,47,67,121,12,13,48,68,122,13,14,49,69,123,14,15,50,70,124,15,16,51,71,125,16,17,52,72,126,17,18,53,73,127,18,19,54,74,96,19,20,55,75,97,20,21,56,76,98,21,22,57,77,99,22,23,58,78,100,23,24,59,79,101,24,25,60,80,102,25,26,61,81,103,26,27,62,82,104,27,28,63,83,105,28,29,32,84,106,29,30,33,85,107,30,31,34,86,108,0,31,35,87,109,17,32,34,64,98,18,33,35,65,99,19,34,36,66,100,20,35,37,67,101,21,36,38,68,102,22,37,39,69,103,23,38,40,70,104,24,39,41,71,105,25,40,42,72,106,26,41,43,73,107,27,42,44,74,108,28,43,45,75,109,29,44,46,76,110,30,45,47,77,111,31,46,48,78,112,0,47,49,79,113,1,48,50,80,114,2,49,51,81,115,3,50,52,82,116,4,51,53,83,117,5,52,54,84,118,6,53,55,85,119,7,54,56,86,120,8,55,57,87,121,9,56,58,88,122,10,57,59,89,123,11,58,60,90,124,12,59,61,91,125,13,60,62,92,126,14,61,63,93,127,15,32,62,94,96,16,33,63,95,97,7,35,64,68,96,8,36,65,69,97,9,37,66,70,98,10,38,67,71,99,11,39,68,72,100,12,40,69,73,101,13,41,70,74,102,14,42,71,75,103,15,43,72,76,104,16,44,73,77,105,17,45,74,78,106,18,46,75,79,107,19,47,76,80,108,20,48,77,81,109,21,49,78,82,110,22,50,79,83,111,23,51,80,84,112,24,52,81,85,113,25,53,82,86,114,26,54,83,87,115,27,55,84,88,116,28,56,85,89,117,29,57,86,90,118,30,58,87,91,119,31,59,88,92,120,0,60,89,93,121,1,61,90,94,122,2,62,91,95,123,3,63,64,92,124,4,32,65,93,125,5,33,66,94,126,6,34,67,95,127,0,40,95,96,98,1,41,64,97,99,2,42,65,98,100,3,43,66,99,101,4,44,67,100,102,5,45,68,101,103,6,46,69,102,104,7,47,70,103,105,8,48,71,104,106,9,49,72,105,107,10,50,73,106,108,11,51,74,107,109,12,52,75,108,110,13,53,76,109,111,14,54,77,110,112,15,55,78,111,113,16,56,79,112,114,17,57,80,113,115,18,58,81,114,116,19,59,82,115,117,20,60,83,116,118,21,61,84,117,119,22,62,85,118,120,23,63,86,119,121,24,32,87,120,122,25,33,88,121,123,26,34,89,122,124,27,35,90,123,125,28,36,91,124,126,29,37,92,125,127,30,38,93,96,126,31,39,94,97,127,32,67,103,33,68,104,34,69,105,35,70,106,36,71,107,37,72,108,38,73,109,39,74,110,40,75,111,41,76,112,42,77,113,43,78,114,44,79,115,45,80,116,46,81,117,47,82,118,48,83,119,49,84,120,50,85,121,51,86,122,52,87,123,53,88,124,54,89,125,55,90,126,56,91,127,57,92,96,58,93,97,59,94,98,60,95,99,61,64,100,62,65,101,63,66,102,12,64,102,13,65,103,14,66,104,15,67,105,16,68,106,17,69,107,18,70,108,19,71,109,20,72,110,21,73,111,22,74,112,23,75,113,24,76,114,25,77,115,26,78,116,27,79,117,28,80,118,29,81,119,30,82,120,31,83,121,0,84,122,1,85,123,2,86,124,3,87,125,4,88,126,5,89,127,6,90,96,7,91,97,8,92,98,9,93,99,10,94,100,11,95,101,20,63,96,21,32,97,22,33,98,23,34,99,24,35,100,25,36,101,26,37,102,27,38,103,28,39,104,29,40,105,30,41,106,31,42,107,0,43,108,1,44,109,2,45,110,3,46,111,4,47,112,5,48,113,6,49,114,7,50,115,8,51,116,9,52,117,10,53,118,11,54,119,12,55,120,13,56,121,14,57,122,15,58,123,16,59,124,17,60,125,18,61,126,19,62,127,0,44,75,1,45,76,2,46,77,3,47,78,4,48,79,5,49,80,6,50,81,7,51,82,8,52,83,9,53,84,10,54,85,11,55,86,12,56,87,13,57,88,14,58,89,15,59,90,16,60,91,17,61,92,18,62,93,19,63,94,20,32,95,21,33,64,22,34,65,23,35,66,24,36,67,25,37,68,26,38,69,27,39,70,28,40,71,29,41,72,30,42,73,31,43,74};
        unsigned char LUT_CN[EDGES]={0,31,47,89,96,180,204,224,0,1,48,90,97,181,205,225,1,2,49,91,98,182,206,226,2,3,50,92,99,183,207,227,3,4,51,93,100,184,208,228,4,5,52,94,101,185,209,229,5,6,53,95,102,186,210,230,6,7,54,64,103,187,211,231,7,8,55,65,104,188,212,232,8,9,56,66,105,189,213,233,9,10,57,67,106,190,214,234,10,11,58,68,107,191,215,235,11,12,59,69,108,160,216,236,12,13,60,70,109,161,217,237,13,14,61,71,110,162,218,238,14,15,62,72,111,163,219,239,15,16,63,73,112,164,220,240,16,17,32,74,113,165,221,241,17,18,33,75,114,166,222,242,18,19,34,76,115,167,223,243,19,20,35,77,116,168,192,244,20,21,36,78,117,169,193,245,21,22,37,79,118,170,194,246,22,23,38,80,119,171,195,247,23,24,39,81,120,172,196,248,24,25,40,82,121,173,197,249,25,26,41,83,122,174,198,250,26,27,42,84,123,175,199,251,27,28,43,85,124,176,200,252,28,29,44,86,125,177,201,253,29,30,45,87,126,178,202,254,30,31,46,88,127,179,203,255,28,32,62,93,120,128,193,244,29,33,63,94,121,129,194,245,30,32,34,95,122,130,195,246,31,33,35,64,123,131,196,247,0,34,36,65,124,132,197,248,1,35,37,66,125,133,198,249,2,36,38,67,126,134,199,250,3,37,39,68,127,135,200,251,4,38,40,69,96,136,201,252,5,39,41,70,97,137,202,253,6,40,42,71,98,138,203,254,7,41,43,72,99,139,204,255,8,42,44,73,100,140,205,224,9,43,45,74,101,141,206,225,10,44,46,75,102,142,207,226,11,45,47,76,103,143,208,227,12,46,48,77,104,144,209,228,13,47,49,78,105,145,210,229,14,48,50,79,106,146,211,230,15,49,51,80,107,147,212,231,16,50,52,81,108,148,213,232,17,51,53,82,109,149,214,233,18,52,54,83,110,150,215,234,19,53,55,84,111,151,216,235,20,54,56,85,112,152,217,236,21,55,57,86,113,153,218,237,22,56,58,87,114,154,219,238,23,57,59,88,115,155,220,239,24,58,60,89,116,156,221,240,25,59,61,90,117,157,222,241,26,60,62,91,118,158,223,242,27,61,63,92,119,159,192,243,8,32,64,92,97,157,160,245,9,33,65,93,98,158,161,246,10,34,66,94,99,159,162,247,11,35,67,95,100,128,163,248,12,36,64,68,101,129,164,249,13,37,65,69,102,130,165,250,14,38,66,70,103,131,166,251,15,39,67,71,104,132,167,252,16,40,68,72,105,133,168,253,17,41,69,73,106,134,169,254,18,42,70,74,107,135,170,255,19,43,71,75,108,136,171,224,20,44,72,76,109,137,172,225,21,45,73,77,110,138,173,226,22,46,74,78,111,139,174,227,23,47,75,79,112,140,175,228,24,48,76,80,113,141,176,229,25,49,77,81,114,142,177,230,26,50,78,82,115,143,178,231,27,51,79,83,116,144,179,232,28,52,80,84,117,145,180,233,29,53,81,85,118,146,181,234,30,54,82,86,119,147,182,235,31,55,83,87,120,148,183,236,0,56,84,88,121,149,184,237,1,57,85,89,122,150,185,238,2,58,86,90,123,151,186,239,3,59,87,91,124,152,187,240,4,60,88,92,125,153,188,241,5,61,89,93,126,154,189,242,6,62,90,94,127,155,190,243,7,63,91,95,96,156,191,244,18,62,64,96,126,153,186,192,19,63,65,97,127,154,187,193,20,32,66,96,98,155,188,194,21,33,67,97,99,156,189,195,22,34,68,98,100,157,190,196,23,35,69,99,101,158,191,197,24,36,70,100,102,159,160,198,25,37,71,101,103,128,161,199,26,38,72,102,104,129,162,200,27,39,73,103,105,130,163,201,28,40,74,104,106,131,164,202,29,41,75,105,107,132,165,203,30,42,76,106,108,133,166,204,31,43,77,107,109,134,167,205,0,44,78,108,110,135,168,206,1,45,79,109,111,136,169,207,2,46,80,110,112,137,170,208,3,47,81,111,113,138,171,209,4,48,82,112,114,139,172,210,5,49,83,113,115,140,173,211,6,50,84,114,116,141,174,212,7,51,85,115,117,142,175,213,8,52,86,116,118,143,176,214,9,53,87,117,119,144,177,215,10,54,88,118,120,145,178,216,11,55,89,119,121,146,179,217,12,56,90,120,122,147,180,218,13,57,91,121,123,148,181,219,14,58,92,122,124,149,182,220,15,59,93,123,125,150,183,221,16,60,94,124,126,151,184,222,17,61,95,125,127,152,185,223};
    #endif

    #ifdef CODE256
        unsigned char LUT_VN[EDGES]={0,1,72,176,221,1,2,73,177,222,2,3,74,178,223,3,4,75,179,224,4,5,76,180,225,5,6,77,181,226,6,7,78,182,227,7,8,79,183,228,8,9,80,184,229,9,10,81,185,230,10,11,82,186,231,11,12,83,187,232,12,13,84,188,233,13,14,85,189,234,14,15,86,190,235,15,16,87,191,236,16,17,88,128,237,17,18,89,129,238,18,19,90,130,239,19,20,91,131,240,20,21,92,132,241,21,22,93,133,242,22,23,94,134,243,23,24,95,135,244,24,25,96,136,245,25,26,97,137,246,26,27,98,138,247,27,28,99,139,248,28,29,100,140,249,29,30,101,141,250,30,31,102,142,251,31,32,103,143,252,32,33,104,144,253,33,34,105,145,254,34,35,106,146,255,35,36,107,147,192,36,37,108,148,193,37,38,109,149,194,38,39,110,150,195,39,40,111,151,196,40,41,112,152,197,41,42,113,153,198,42,43,114,154,199,43,44,115,155,200,44,45,116,156,201,45,46,117,157,202,46,47,118,158,203,47,48,119,159,204,48,49,120,160,205,49,50,121,161,206,50,51,122,162,207,51,52,123,163,208,52,53,124,164,209,53,54,125,165,210,54,55,126,166,211,55,56,127,167,212,56,57,64,168,213,57,58,65,169,214,58,59,66,170,215,59,60,67,171,216,60,61,68,172,217,61,62,69,173,218,62,63,70,174,219,0,63,71,175,220,34,64,67,128,200,35,65,68,129,201,36,66,69,130,202,37,67,70,131,203,38,68,71,132,204,39,69,72,133,205,40,70,73,134,206,41,71,74,135,207,42,72,75,136,208,43,73,76,137,209,44,74,77,138,210,45,75,78,139,211,46,76,79,140,212,47,77,80,141,213,48,78,81,142,214,49,79,82,143,215,50,80,83,144,216,51,81,84,145,217,52,82,85,146,218,53,83,86,147,219,54,84,87,148,220,55,85,88,149,221,56,86,89,150,222,57,87,90,151,223,58,88,91,152,224,59,89,92,153,225,60,90,93,154,226,61,91,94,155,227,62,92,95,156,228,63,93,96,157,229,0,94,97,158,230,1,95,98,159,231,2,96,99,160,232,3,97,100,161,233,4,98,101,162,234,5,99,102,163,235,6,100,103,164,236,7,101,104,165,237,8,102,105,166,238,9,103,106,167,239,10,104,107,168,240,11,105,108,169,241,12,106,109,170,242,13,107,110,171,243,14,108,111,172,244,15,109,112,173,245,16,110,113,174,246,17,111,114,175,247,18,112,115,176,248,19,113,116,177,249,20,114,117,178,250,21,115,118,179,251,22,116,119,180,252,23,117,120,181,253,24,118,121,182,254,25,119,122,183,255,26,120,123,184,192,27,121,124,185,193,28,122,125,186,194,29,123,126,187,195,30,124,127,188,196,31,64,125,189,197,32,65,126,190,198,33,66,127,191,199,14,78,128,137,194,15,79,129,138,195,16,80,130,139,196,17,81,131,140,197,18,82,132,141,198,19,83,133,142,199,20,84,134,143,200,21,85,135,144,201,22,86,136,145,202,23,87,137,146,203,24,88,138,147,204,25,89,139,148,205,26,90,140,149,206,27,91,141,150,207,28,92,142,151,208,29,93,143,152,209,30,94,144,153,210,31,95,145,154,211,32,96,146,155,212,33,97,147,156,213,34,98,148,157,214,35,99,149,158,215,36,100,150,159,216,37,101,151,160,217,38,102,152,161,218,39,103,153,162,219,40,104,154,163,220,41,105,155,164,221,42,106,156,165,222,43,107,157,166,223,44,108,158,167,224,45,109,159,168,225,46,110,160,169,226,47,111,161,170,227,48,112,162,171,228,49,113,163,172,229,50,114,164,173,230,51,115,165,174,231,52,116,166,175,232,53,117,167,176,233,54,118,168,177,234,55,119,169,178,235,56,120,170,179,236,57,121,171,180,237,58,122,172,181,238,59,123,173,182,239,60,124,174,183,240,61,125,175,184,241,62,126,176,185,242,63,127,177,186,243,0,64,178,187,244,1,65,179,188,245,2,66,180,189,246,3,67,181,190,247,4,68,182,191,248,5,69,128,183,249,6,70,129,184,250,7,71,130,185,251,8,72,131,186,252,9,73,132,187,253,10,74,133,188,254,11,75,134,189,255,12,76,135,190,192,13,77,136,191,193,39,105,165,192,245,40,106,166,193,246,41,107,167,194,247,42,108,168,195,248,43,109,169,196,249,44,110,170,197,250,45,111,171,198,251,46,112,172,199,252,47,113,173,200,253,48,114,174,201,254,49,115,175,202,255,50,116,176,192,203,51,117,177,193,204,52,118,178,194,205,53,119,179,195,206,54,120,180,196,207,55,121,181,197,208,56,122,182,198,209,57,123,183,199,210,58,124,184,200,211,59,125,185,201,212,60,126,186,202,213,61,127,187,203,214,62,64,188,204,215,63,65,189,205,216,0,66,190,206,217,1,67,191,207,218,2,68,128,208,219,3,69,129,209,220,4,70,130,210,221,5,71,131,211,222,6,72,132,212,223,7,73,133,213,224,8,74,134,214,225,9,75,135,215,226,10,76,136,216,227,11,77,137,217,228,12,78,138,218,229,13,79,139,219,230,14,80,140,220,231,15,81,141,221,232,16,82,142,222,233,17,83,143,223,234,18,84,144,224,235,19,85,145,225,236,20,86,146,226,237,21,87,147,227,238,22,88,148,228,239,23,89,149,229,240,24,90,150,230,241,25,91,151,231,242,26,92,152,232,243,27,93,153,233,244,28,94,154,234,245,29,95,155,235,246,30,96,156,236,247,31,97,157,237,248,32,98,158,238,249,33,99,159,239,250,34,100,160,240,251,35,101,161,241,252,36,102,162,242,253,37,103,163,243,254,38,104,164,244,255,64,136,198,65,137,199,66,138,200,67,139,201,68,140,202,69,141,203,70,142,204,71,143,205,72,144,206,73,145,207,74,146,208,75,147,209,76,148,210,77,149,211,78,150,212,79,151,213,80,152,214,81,153,215,82,154,216,83,155,217,84,156,218,85,157,219,86,158,220,87,159,221,88,160,222,89,161,223,90,162,224,91,163,225,92,164,226,93,165,227,94,166,228,95,167,229,96,168,230,97,169,231,98,170,232,99,171,233,100,172,234,101,173,235,102,174,236,103,175,237,104,176,238,105,177,239,106,178,240,107,179,241,108,180,242,109,181,243,110,182,244,111,183,245,112,184,246,113,185,247,114,186,248,115,187,249,116,188,250,117,189,251,118,190,252,119,191,253,120,128,254,121,129,255,122,130,192,123,131,193,124,132,194,125,133,195,126,134,196,127,135,197,21,128,253,22,129,254,23,130,255,24,131,192,25,132,193,26,133,194,27,134,195,28,135,196,29,136,197,30,137,198,31,138,199,32,139,200,33,140,201,34,141,202,35,142,203,36,143,204,37,144,205,38,145,206,39,146,207,40,147,208,41,148,209,42,149,210,43,150,211,44,151,212,45,152,213,46,153,214,47,154,215,48,155,216,49,156,217,50,157,218,51,158,219,52,159,220,53,160,221,54,161,222,55,162,223,56,163,224,57,164,225,58,165,226,59,166,227,60,167,228,61,168,229,62,169,230,63,170,231,0,171,232,1,172,233,2,173,234,3,174,235,4,175,236,5,176,237,6,177,238,7,178,239,8,179,240,9,180,241,10,181,242,11,182,243,12,183,244,13,184,245,14,185,246,15,186,247,16,187,248,17,188,249,18,189,250,19,190,251,20,191,252,2,91,192,3,92,193,4,93,194,5,94,195,6,95,196,7,96,197,8,97,198,9,98,199,10,99,200,11,100,201,12,101,202,13,102,203,14,103,204,15,104,205,16,105,206,17,106,207,18,107,208,19,108,209,20,109,210,21,110,211,22,111,212,23,112,213,24,113,214,25,114,215,26,115,216,27,116,217,28,117,218,29,118,219,30,119,220,31,120,221,32,121,222,33,122,223,34,123,224,35,124,225,36,125,226,37,126,227,38,127,228,39,64,229,40,65,230,41,66,231,42,67,232,43,68,233,44,69,234,45,70,235,46,71,236,47,72,237,48,73,238,49,74,239,50,75,240,51,76,241,52,77,242,53,78,243,54,79,244,55,80,245,56,81,246,57,82,247,58,83,248,59,84,249,60,85,250,61,86,251,62,87,252,63,88,253,0,89,254,1,90,255,0,102,149,1,103,150,2,104,151,3,105,152,4,106,153,5,107,154,6,108,155,7,109,156,8,110,157,9,111,158,10,112,159,11,113,160,12,114,161,13,115,162,14,116,163,15,117,164,16,118,165,17,119,166,18,120,167,19,121,168,20,122,169,21,123,170,22,124,171,23,125,172,24,126,173,25,127,174,26,64,175,27,65,176,28,66,177,29,67,178,30,68,179,31,69,180,32,70,181,33,71,182,34,72,183,35,73,184,36,74,185,37,75,186,38,76,187,39,77,188,40,78,189,41,79,190,42,80,191,43,81,128,44,82,129,45,83,130,46,84,131,47,85,132,48,86,133,49,87,134,50,88,135,51,89,136,52,90,137,53,91,138,54,92,139,55,93,140,56,94,141,57,95,142,58,96,143,59,97,144,60,98,145,61,99,146,62,100,147,63,101,148};
        unsigned short LUT_CN[EDGES]={0,63,94,178,217,363,446,448,0,1,95,179,218,364,447,449,1,2,96,180,219,365,384,450,2,3,97,181,220,366,385,451,3,4,98,182,221,367,386,452,4,5,99,183,222,368,387,453,5,6,100,184,223,369,388,454,6,7,101,185,224,370,389,455,7,8,102,186,225,371,390,456,8,9,103,187,226,372,391,457,9,10,104,188,227,373,392,458,10,11,105,189,228,374,393,459,11,12,106,190,229,375,394,460,12,13,107,191,230,376,395,461,13,14,108,128,231,377,396,462,14,15,109,129,232,378,397,463,15,16,110,130,233,379,398,464,16,17,111,131,234,380,399,465,17,18,112,132,235,381,400,466,18,19,113,133,236,382,401,467,19,20,114,134,237,383,402,468,20,21,115,135,238,320,403,469,21,22,116,136,239,321,404,470,22,23,117,137,240,322,405,471,23,24,118,138,241,323,406,472,24,25,119,139,242,324,407,473,25,26,120,140,243,325,408,474,26,27,121,141,244,326,409,475,27,28,122,142,245,327,410,476,28,29,123,143,246,328,411,477,29,30,124,144,247,329,412,478,30,31,125,145,248,330,413,479,31,32,126,146,249,331,414,480,32,33,127,147,250,332,415,481,33,34,64,148,251,333,416,482,34,35,65,149,252,334,417,483,35,36,66,150,253,335,418,484,36,37,67,151,254,336,419,485,37,38,68,152,255,337,420,486,38,39,69,153,192,338,421,487,39,40,70,154,193,339,422,488,40,41,71,155,194,340,423,489,41,42,72,156,195,341,424,490,42,43,73,157,196,342,425,491,43,44,74,158,197,343,426,492,44,45,75,159,198,344,427,493,45,46,76,160,199,345,428,494,46,47,77,161,200,346,429,495,47,48,78,162,201,347,430,496,48,49,79,163,202,348,431,497,49,50,80,164,203,349,432,498,50,51,81,165,204,350,433,499,51,52,82,166,205,351,434,500,52,53,83,167,206,352,435,501,53,54,84,168,207,353,436,502,54,55,85,169,208,354,437,503,55,56,86,170,209,355,438,504,56,57,87,171,210,356,439,505,57,58,88,172,211,357,440,506,58,59,89,173,212,358,441,507,59,60,90,174,213,359,442,508,60,61,91,175,214,360,443,509,61,62,92,176,215,361,444,510,62,63,93,177,216,362,445,511,56,64,125,178,215,256,421,474,57,65,126,179,216,257,422,475,58,66,127,180,217,258,423,476,59,64,67,181,218,259,424,477,60,65,68,182,219,260,425,478,61,66,69,183,220,261,426,479,62,67,70,184,221,262,427,480,63,68,71,185,222,263,428,481,0,69,72,186,223,264,429,482,1,70,73,187,224,265,430,483,2,71,74,188,225,266,431,484,3,72,75,189,226,267,432,485,4,73,76,190,227,268,433,486,5,74,77,191,228,269,434,487,6,75,78,128,229,270,435,488,7,76,79,129,230,271,436,489,8,77,80,130,231,272,437,490,9,78,81,131,232,273,438,491,10,79,82,132,233,274,439,492,11,80,83,133,234,275,440,493,12,81,84,134,235,276,441,494,13,82,85,135,236,277,442,495,14,83,86,136,237,278,443,496,15,84,87,137,238,279,444,497,16,85,88,138,239,280,445,498,17,86,89,139,240,281,446,499,18,87,90,140,241,282,447,500,19,88,91,141,242,283,384,501,20,89,92,142,243,284,385,502,21,90,93,143,244,285,386,503,22,91,94,144,245,286,387,504,23,92,95,145,246,287,388,505,24,93,96,146,247,288,389,506,25,94,97,147,248,289,390,507,26,95,98,148,249,290,391,508,27,96,99,149,250,291,392,509,28,97,100,150,251,292,393,510,29,98,101,151,252,293,394,511,30,99,102,152,253,294,395,448,31,100,103,153,254,295,396,449,32,101,104,154,255,296,397,450,33,102,105,155,192,297,398,451,34,103,106,156,193,298,399,452,35,104,107,157,194,299,400,453,36,105,108,158,195,300,401,454,37,106,109,159,196,301,402,455,38,107,110,160,197,302,403,456,39,108,111,161,198,303,404,457,40,109,112,162,199,304,405,458,41,110,113,163,200,305,406,459,42,111,114,164,201,306,407,460,43,112,115,165,202,307,408,461,44,113,116,166,203,308,409,462,45,114,117,167,204,309,410,463,46,115,118,168,205,310,411,464,47,116,119,169,206,311,412,465,48,117,120,170,207,312,413,466,49,118,121,171,208,313,414,467,50,119,122,172,209,314,415,468,51,120,123,173,210,315,416,469,52,121,124,174,211,316,417,470,53,122,125,175,212,317,418,471,54,123,126,176,213,318,419,472,55,124,127,177,214,319,420,473,16,64,128,183,219,312,320,491,17,65,129,184,220,313,321,492,18,66,130,185,221,314,322,493,19,67,131,186,222,315,323,494,20,68,132,187,223,316,324,495,21,69,133,188,224,317,325,496,22,70,134,189,225,318,326,497,23,71,135,190,226,319,327,498,24,72,136,191,227,256,328,499,25,73,128,137,228,257,329,500,26,74,129,138,229,258,330,501,27,75,130,139,230,259,331,502,28,76,131,140,231,260,332,503,29,77,132,141,232,261,333,504,30,78,133,142,233,262,334,505,31,79,134,143,234,263,335,506,32,80,135,144,235,264,336,507,33,81,136,145,236,265,337,508,34,82,137,146,237,266,338,509,35,83,138,147,238,267,339,510,36,84,139,148,239,268,340,511,37,85,140,149,240,269,341,448,38,86,141,150,241,270,342,449,39,87,142,151,242,271,343,450,40,88,143,152,243,272,344,451,41,89,144,153,244,273,345,452,42,90,145,154,245,274,346,453,43,91,146,155,246,275,347,454,44,92,147,156,247,276,348,455,45,93,148,157,248,277,349,456,46,94,149,158,249,278,350,457,47,95,150,159,250,279,351,458,48,96,151,160,251,280,352,459,49,97,152,161,252,281,353,460,50,98,153,162,253,282,354,461,51,99,154,163,254,283,355,462,52,100,155,164,255,284,356,463,53,101,156,165,192,285,357,464,54,102,157,166,193,286,358,465,55,103,158,167,194,287,359,466,56,104,159,168,195,288,360,467,57,105,160,169,196,289,361,468,58,106,161,170,197,290,362,469,59,107,162,171,198,291,363,470,60,108,163,172,199,292,364,471,61,109,164,173,200,293,365,472,62,110,165,174,201,294,366,473,63,111,166,175,202,295,367,474,0,112,167,176,203,296,368,475,1,113,168,177,204,297,369,476,2,114,169,178,205,298,370,477,3,115,170,179,206,299,371,478,4,116,171,180,207,300,372,479,5,117,172,181,208,301,373,480,6,118,173,182,209,302,374,481,7,119,174,183,210,303,375,482,8,120,175,184,211,304,376,483,9,121,176,185,212,305,377,484,10,122,177,186,213,306,378,485,11,123,178,187,214,307,379,486,12,124,179,188,215,308,380,487,13,125,180,189,216,309,381,488,14,126,181,190,217,310,382,489,15,127,182,191,218,311,383,490,35,120,190,192,203,314,323,384,36,121,191,193,204,315,324,385,37,122,128,194,205,316,325,386,38,123,129,195,206,317,326,387,39,124,130,196,207,318,327,388,40,125,131,197,208,319,328,389,41,126,132,198,209,256,329,390,42,127,133,199,210,257,330,391,43,64,134,200,211,258,331,392,44,65,135,201,212,259,332,393,45,66,136,202,213,260,333,394,46,67,137,203,214,261,334,395,47,68,138,204,215,262,335,396,48,69,139,205,216,263,336,397,49,70,140,206,217,264,337,398,50,71,141,207,218,265,338,399,51,72,142,208,219,266,339,400,52,73,143,209,220,267,340,401,53,74,144,210,221,268,341,402,54,75,145,211,222,269,342,403,55,76,146,212,223,270,343,404,56,77,147,213,224,271,344,405,57,78,148,214,225,272,345,406,58,79,149,215,226,273,346,407,59,80,150,216,227,274,347,408,60,81,151,217,228,275,348,409,61,82,152,218,229,276,349,410,62,83,153,219,230,277,350,411,63,84,154,220,231,278,351,412,0,85,155,221,232,279,352,413,1,86,156,222,233,280,353,414,2,87,157,223,234,281,354,415,3,88,158,224,235,282,355,416,4,89,159,225,236,283,356,417,5,90,160,226,237,284,357,418,6,91,161,227,238,285,358,419,7,92,162,228,239,286,359,420,8,93,163,229,240,287,360,421,9,94,164,230,241,288,361,422,10,95,165,231,242,289,362,423,11,96,166,232,243,290,363,424,12,97,167,233,244,291,364,425,13,98,168,234,245,292,365,426,14,99,169,235,246,293,366,427,15,100,170,236,247,294,367,428,16,101,171,237,248,295,368,429,17,102,172,238,249,296,369,430,18,103,173,239,250,297,370,431,19,104,174,240,251,298,371,432,20,105,175,241,252,299,372,433,21,106,176,242,253,300,373,434,22,107,177,243,254,301,374,435,23,108,178,244,255,302,375,436,24,109,179,192,245,303,376,437,25,110,180,193,246,304,377,438,26,111,181,194,247,305,378,439,27,112,182,195,248,306,379,440,28,113,183,196,249,307,380,441,29,114,184,197,250,308,381,442,30,115,185,198,251,309,382,443,31,116,186,199,252,310,383,444,32,117,187,200,253,311,320,445,33,118,188,201,254,312,321,446,34,119,189,202,255,313,322,447};
    #endif


    cudaError_t err=cudaSuccess; 

    //======================================================================================================================================================================
    //kernel dimensions

    dim3 threadsPerBlock(N,1,1);
    dim3 numBlocks(1,1,1);

    //======================================================================================================================================================================
    //size of variables

    /* size_t size_local_sum=sizeof(unsigned int)*input_params.x_size*input_params.y_size*input_params.z_size;
    size_t size_scaled_predicted=sizeof(signed int)*input_params.x_size*input_params.y_size*input_params.z_size;
    size_t size_omega=sizeof(unsigned short)*input_params.x_size*input_params.y_size*input_params.z_size;
    size_t size_samples=(sizeof(unsigned short int)*input_params.x_size*input_params.y_size*input_params.z_size);
    size_t size_sign_scaled=(sizeof(unsigned short int)*input_params.x_size*input_params.y_size*input_params.z_size); */
    size_t size_LPi=(sizeof(unsigned char)*N); 
    size_t size_LUT=(sizeof(unsigned char)*EDGES); 
    #ifdef CODE256
        size_t size_LUT_CN=(sizeof(unsigned short)*EDGES); 
    #endif


    //==================================================================================================================LPi====================================================
    //variables declaration

    unsigned char *h_LPi=NULL;
    unsigned char *h_decoded_word=NULL;
    unsigned char *d_LPi=NULL;


    //======================================================================================================================================================================
    //allocate host memory

    err=cudaHostAlloc((void **)&h_LPi, size_LPi, cudaHostAllocDefault );
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to allocate host LPi(error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }

    err=cudaHostAlloc((void **)&h_decoded_word, size_LPi, cudaHostAllocDefault );
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to allocate host decoded_word(error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }

    //======================================================================================================================================================================
    //Initialize host memory

    #ifdef CODE64  
        {
            h_LPi[0]=1;
            h_LPi[1]=0;
            h_LPi[2]=1;
            h_LPi[3]=1;
            h_LPi[4]=0;
            h_LPi[5]=0;
            h_LPi[6]=1;
            h_LPi[7]=1;
            h_LPi[8]=0;
            h_LPi[9]=0;
            h_LPi[10]=1;
            h_LPi[11]=0;
            h_LPi[12]=0;
            h_LPi[13]=1;
            h_LPi[14]=1;
            h_LPi[15]=0;
            h_LPi[16]=0;
            h_LPi[17]=0;
            h_LPi[18]=1;
            h_LPi[19]=0;
            h_LPi[20]=0;
            h_LPi[21]=1;
            h_LPi[22]=0;
            h_LPi[23]=0;
            h_LPi[24]=0;
            h_LPi[25]=1;
            h_LPi[26]=1;
            h_LPi[27]=1;
            h_LPi[28]=0;
            h_LPi[29]=0;
            h_LPi[30]=0;
            h_LPi[31]=1;
            h_LPi[32]=0;
            h_LPi[33]=0;
            h_LPi[34]=0;
            h_LPi[35]=0;
            h_LPi[36]=0;
            h_LPi[37]=1;
            h_LPi[38]=0;
            h_LPi[39]=0;
            h_LPi[40]=1;
            h_LPi[41]=1;
            h_LPi[42]=0;
            h_LPi[43]=0;
            h_LPi[44]=0;
            h_LPi[45]=0;
            h_LPi[46]=0;
            h_LPi[47]=0;
            h_LPi[48]=1;
            h_LPi[49]=1;
            h_LPi[50]=1;
            h_LPi[51]=0;
            h_LPi[52]=1;
            h_LPi[53]=1;
            h_LPi[54]=1;
            h_LPi[55]=0;
            h_LPi[56]=1;
            h_LPi[57]=0;
            h_LPi[58]=0;
            h_LPi[59]=0;
            h_LPi[60]=0;
            h_LPi[61]=1;
            h_LPi[62]=1;
            h_LPi[63]=0;
            h_LPi[64]=0;
            h_LPi[65]=0;
            h_LPi[66]=0;
            h_LPi[67]=0;
            h_LPi[68]=0;
            h_LPi[69]=0;
            h_LPi[70]=0;
            h_LPi[71]=1;
            h_LPi[72]=0;
            h_LPi[73]=0;
            h_LPi[74]=1;
            h_LPi[75]=0;
            h_LPi[76]=0;
            h_LPi[77]=0;
            h_LPi[78]=1;
            h_LPi[79]=0;
            h_LPi[80]=0;
            h_LPi[81]=0;
            h_LPi[82]=1;
            h_LPi[83]=0;
            h_LPi[84]=0;
            h_LPi[85]=0;
            h_LPi[86]=0;
            h_LPi[87]=1;
            h_LPi[88]=1;
            h_LPi[89]=1;
            h_LPi[90]=1;
            h_LPi[91]=1;
            h_LPi[92]=1;
            h_LPi[93]=1;
            h_LPi[94]=0;
            h_LPi[95]=0;
            h_LPi[96]=0;
            h_LPi[97]=0;
            h_LPi[98]=0;
            h_LPi[99]=0;
            h_LPi[100]=0;
            h_LPi[101]=0;
            h_LPi[102]=0;
            h_LPi[103]=1;
            h_LPi[104]=0;
            h_LPi[105]=0;
            h_LPi[106]=0;
            h_LPi[107]=0;
            h_LPi[108]=0;
            h_LPi[109]=1;
            h_LPi[110]=0;
            h_LPi[111]=0;
            h_LPi[112]=1;
            h_LPi[113]=1;
            h_LPi[114]=1;
            h_LPi[115]=0;
            h_LPi[116]=0;
            h_LPi[117]=0;
            h_LPi[118]=1;
            h_LPi[119]=1;
            h_LPi[120]=0;
            h_LPi[121]=0;
            h_LPi[122]=0;
            h_LPi[123]=0;
            h_LPi[124]=1;
            h_LPi[125]=0;
            h_LPi[126]=0;
            h_LPi[127]=1;
        }
    #endif

    #ifdef CODE128
        {
            h_LPi[0]=0;
            h_LPi[1]=0;
            h_LPi[2]=0;
            h_LPi[3]=0;
            h_LPi[4]=0;
            h_LPi[5]=0;
            h_LPi[6]=1;
            h_LPi[7]=0;
            h_LPi[8]=0;
            h_LPi[9]=0;
            h_LPi[10]=0;
            h_LPi[11]=0;
            h_LPi[12]=0;
            h_LPi[13]=0;
            h_LPi[14]=1;
            h_LPi[15]=0;
            h_LPi[16]=1;
            h_LPi[17]=0;
            h_LPi[18]=0;
            h_LPi[19]=0;
            h_LPi[20]=1;
            h_LPi[21]=1;
            h_LPi[22]=1;
            h_LPi[23]=1;
            h_LPi[24]=0;
            h_LPi[25]=1;
            h_LPi[26]=1;
            h_LPi[27]=0;
            h_LPi[28]=1;
            h_LPi[29]=0;
            h_LPi[30]=0;
            h_LPi[31]=0;
            h_LPi[32]=0;
            h_LPi[33]=1;
            h_LPi[34]=0;
            h_LPi[35]=0;
            h_LPi[36]=1;
            h_LPi[37]=0;
            h_LPi[38]=1;
            h_LPi[39]=0;
            h_LPi[40]=0;
            h_LPi[41]=0;
            h_LPi[42]=0;
            h_LPi[43]=0;
            h_LPi[44]=0;
            h_LPi[45]=0;
            h_LPi[46]=1;
            h_LPi[47]=0;
            h_LPi[48]=0;
            h_LPi[49]=0;
            h_LPi[50]=1;
            h_LPi[51]=0;
            h_LPi[52]=0;
            h_LPi[53]=0;
            h_LPi[54]=1;
            h_LPi[55]=0;
            h_LPi[56]=0;
            h_LPi[57]=0;
            h_LPi[58]=0;
            h_LPi[59]=0;
            h_LPi[60]=0;
            h_LPi[61]=0;
            h_LPi[62]=0;
            h_LPi[63]=0;
            h_LPi[64]=0;
            h_LPi[65]=1;
            h_LPi[66]=0;
            h_LPi[67]=0;
            h_LPi[68]=0;
            h_LPi[69]=0;
            h_LPi[70]=0;
            h_LPi[71]=1;
            h_LPi[72]=0;
            h_LPi[73]=0;
            h_LPi[74]=0;
            h_LPi[75]=0;
            h_LPi[76]=0;
            h_LPi[77]=0;
            h_LPi[78]=0;
            h_LPi[79]=1;
            h_LPi[80]=1;
            h_LPi[81]=1;
            h_LPi[82]=0;
            h_LPi[83]=0;
            h_LPi[84]=0;
            h_LPi[85]=0;
            h_LPi[86]=0;
            h_LPi[87]=1;
            h_LPi[88]=0;
            h_LPi[89]=0;
            h_LPi[90]=0;
            h_LPi[91]=1;
            h_LPi[92]=1;
            h_LPi[93]=0;
            h_LPi[94]=0;
            h_LPi[95]=1;
            h_LPi[96]=0;
            h_LPi[97]=0;
            h_LPi[98]=0;
            h_LPi[99]=0;
            h_LPi[100]=0;
            h_LPi[101]=1;
            h_LPi[102]=0;
            h_LPi[103]=1;
            h_LPi[104]=1;
            h_LPi[105]=0;
            h_LPi[106]=0;
            h_LPi[107]=0;
            h_LPi[108]=0;
            h_LPi[109]=0;
            h_LPi[110]=0;
            h_LPi[111]=0;
            h_LPi[112]=0;
            h_LPi[113]=0;
            h_LPi[114]=0;
            h_LPi[115]=0;
            h_LPi[116]=0;
            h_LPi[117]=1;
            h_LPi[118]=1;
            h_LPi[119]=0;
            h_LPi[120]=1;
            h_LPi[121]=0;
            h_LPi[122]=0;
            h_LPi[123]=0;
            h_LPi[124]=0;
            h_LPi[125]=0;
            h_LPi[126]=1;
            h_LPi[127]=1;
            h_LPi[128]=0;
            h_LPi[129]=0;
            h_LPi[130]=1;
            h_LPi[131]=0;
            h_LPi[132]=0;
            h_LPi[133]=0;
            h_LPi[134]=1;
            h_LPi[135]=0;
            h_LPi[136]=1;
            h_LPi[137]=0;
            h_LPi[138]=1;
            h_LPi[139]=0;
            h_LPi[140]=0;
            h_LPi[141]=0;
            h_LPi[142]=0;
            h_LPi[143]=0;
            h_LPi[144]=1;
            h_LPi[145]=1;
            h_LPi[146]=0;
            h_LPi[147]=0;
            h_LPi[148]=0;
            h_LPi[149]=0;
            h_LPi[150]=0;
            h_LPi[151]=1;
            h_LPi[152]=0;
            h_LPi[153]=0;
            h_LPi[154]=0;
            h_LPi[155]=0;
            h_LPi[156]=0;
            h_LPi[157]=0;
            h_LPi[158]=0;
            h_LPi[159]=1;
            h_LPi[160]=0;
            h_LPi[161]=1;
            h_LPi[162]=0;
            h_LPi[163]=1;
            h_LPi[164]=0;
            h_LPi[165]=0;
            h_LPi[166]=0;
            h_LPi[167]=0;
            h_LPi[168]=0;
            h_LPi[169]=1;
            h_LPi[170]=1;
            h_LPi[171]=0;
            h_LPi[172]=0;
            h_LPi[173]=1;
            h_LPi[174]=0;
            h_LPi[175]=0;
            h_LPi[176]=0;
            h_LPi[177]=1;
            h_LPi[178]=0;
            h_LPi[179]=1;
            h_LPi[180]=0;
            h_LPi[181]=0;
            h_LPi[182]=1;
            h_LPi[183]=0;
            h_LPi[184]=0;
            h_LPi[185]=0;
            h_LPi[186]=0;
            h_LPi[187]=0;
            h_LPi[188]=1;
            h_LPi[189]=0;
            h_LPi[190]=0;
            h_LPi[191]=0;
            h_LPi[192]=0;
            h_LPi[193]=0;
            h_LPi[194]=0;
            h_LPi[195]=0;
            h_LPi[196]=0;
            h_LPi[197]=1;
            h_LPi[198]=0;
            h_LPi[199]=0;
            h_LPi[200]=0;
            h_LPi[201]=1;
            h_LPi[202]=0;
            h_LPi[203]=1;
            h_LPi[204]=0;
            h_LPi[205]=0;
            h_LPi[206]=1;
            h_LPi[207]=0;
            h_LPi[208]=0;
            h_LPi[209]=0;
            h_LPi[210]=0;
            h_LPi[211]=0;
            h_LPi[212]=0;
            h_LPi[213]=1;
            h_LPi[214]=0;
            h_LPi[215]=0;
            h_LPi[216]=0;
            h_LPi[217]=0;
            h_LPi[218]=0;
            h_LPi[219]=0;
            h_LPi[220]=0;
            h_LPi[221]=0;
            h_LPi[222]=1;
            h_LPi[223]=0;
            h_LPi[224]=0;
            h_LPi[225]=0;
            h_LPi[226]=1;
            h_LPi[227]=0;
            h_LPi[228]=0;
            h_LPi[229]=1;
            h_LPi[230]=1;
            h_LPi[231]=0;
            h_LPi[232]=0;
            h_LPi[233]=0;
            h_LPi[234]=0;
            h_LPi[235]=0;
            h_LPi[236]=0;
            h_LPi[237]=1;
            h_LPi[238]=0;
            h_LPi[239]=0;
            h_LPi[240]=0;
            h_LPi[241]=0;
            h_LPi[242]=0;
            h_LPi[243]=0;
            h_LPi[244]=0;
            h_LPi[245]=0;
            h_LPi[246]=0;
            h_LPi[247]=1;
            h_LPi[248]=0;
            h_LPi[249]=1;
            h_LPi[250]=0;
            h_LPi[251]=0;
            h_LPi[252]=1;
            h_LPi[253]=0;
            h_LPi[254]=0;
            h_LPi[255]=1;
        }    
    #endif

    #ifdef CODE256
        {
            h_LPi[0]=1;
            h_LPi[1]=0;
            h_LPi[2]=0;
            h_LPi[3]=0;
            h_LPi[4]=1;
            h_LPi[5]=1;
            h_LPi[6]=0;
            h_LPi[7]=0;
            h_LPi[8]=0;
            h_LPi[9]=0;
            h_LPi[10]=0;
            h_LPi[11]=0;
            h_LPi[12]=0;
            h_LPi[13]=0;
            h_LPi[14]=0;
            h_LPi[15]=1;
            h_LPi[16]=0;
            h_LPi[17]=0;
            h_LPi[18]=0;
            h_LPi[19]=0;
            h_LPi[20]=0;
            h_LPi[21]=0;
            h_LPi[22]=0;
            h_LPi[23]=0;
            h_LPi[24]=1;
            h_LPi[25]=0;
            h_LPi[26]=0;
            h_LPi[27]=0;
            h_LPi[28]=0;
            h_LPi[29]=0;
            h_LPi[30]=0;
            h_LPi[31]=1;
            h_LPi[32]=0;
            h_LPi[33]=0;
            h_LPi[34]=0;
            h_LPi[35]=0;
            h_LPi[36]=0;
            h_LPi[37]=0;
            h_LPi[38]=0;
            h_LPi[39]=1;
            h_LPi[40]=0;
            h_LPi[41]=0;
            h_LPi[42]=0;
            h_LPi[43]=0;
            h_LPi[44]=0;
            h_LPi[45]=1;
            h_LPi[46]=0;
            h_LPi[47]=0;
            h_LPi[48]=0;
            h_LPi[49]=1;
            h_LPi[50]=0;
            h_LPi[51]=0;
            h_LPi[52]=0;
            h_LPi[53]=0;
            h_LPi[54]=0;
            h_LPi[55]=0;
            h_LPi[56]=0;
            h_LPi[57]=0;
            h_LPi[58]=0;
            h_LPi[59]=1;
            h_LPi[60]=0;
            h_LPi[61]=0;
            h_LPi[62]=0;
            h_LPi[63]=1;
            h_LPi[64]=0;
            h_LPi[65]=0;
            h_LPi[66]=1;
            h_LPi[67]=0;
            h_LPi[68]=0;
            h_LPi[69]=0;
            h_LPi[70]=0;
            h_LPi[71]=1;
            h_LPi[72]=0;
            h_LPi[73]=0;
            h_LPi[74]=0;
            h_LPi[75]=0;
            h_LPi[76]=0;
            h_LPi[77]=0;
            h_LPi[78]=0;
            h_LPi[79]=0;
            h_LPi[80]=0;
            h_LPi[81]=0;
            h_LPi[82]=0;
            h_LPi[83]=1;
            h_LPi[84]=1;
            h_LPi[85]=0;
            h_LPi[86]=0;
            h_LPi[87]=0;
            h_LPi[88]=0;
            h_LPi[89]=1;
            h_LPi[90]=1;
            h_LPi[91]=0;
            h_LPi[92]=0;
            h_LPi[93]=0;
            h_LPi[94]=1;
            h_LPi[95]=0;
            h_LPi[96]=0;
            h_LPi[97]=0;
            h_LPi[98]=0;
            h_LPi[99]=0;
            h_LPi[100]=1;
            h_LPi[101]=0;
            h_LPi[102]=0;
            h_LPi[103]=0;
            h_LPi[104]=0;
            h_LPi[105]=0;
            h_LPi[106]=0;
            h_LPi[107]=0;
            h_LPi[108]=0;
            h_LPi[109]=0;
            h_LPi[110]=0;
            h_LPi[111]=0;
            h_LPi[112]=0;
            h_LPi[113]=0;
            h_LPi[114]=0;
            h_LPi[115]=0;
            h_LPi[116]=1;
            h_LPi[117]=1;
            h_LPi[118]=0;
            h_LPi[119]=0;
            h_LPi[120]=0;
            h_LPi[121]=1;
            h_LPi[122]=1;
            h_LPi[123]=0;
            h_LPi[124]=0;
            h_LPi[125]=0;
            h_LPi[126]=0;
            h_LPi[127]=0;
            h_LPi[128]=0;
            h_LPi[129]=1;
            h_LPi[130]=0;
            h_LPi[131]=0;
            h_LPi[132]=0;
            h_LPi[133]=1;
            h_LPi[134]=0;
            h_LPi[135]=1;
            h_LPi[136]=0;
            h_LPi[137]=0;
            h_LPi[138]=1;
            h_LPi[139]=0;
            h_LPi[140]=0;
            h_LPi[141]=0;
            h_LPi[142]=0;
            h_LPi[143]=0;
            h_LPi[144]=0;
            h_LPi[145]=1;
            h_LPi[146]=1;
            h_LPi[147]=0;
            h_LPi[148]=0;
            h_LPi[149]=0;
            h_LPi[150]=0;
            h_LPi[151]=1;
            h_LPi[152]=0;
            h_LPi[153]=0;
            h_LPi[154]=1;
            h_LPi[155]=0;
            h_LPi[156]=0;
            h_LPi[157]=0;
            h_LPi[158]=0;
            h_LPi[159]=0;
            h_LPi[160]=0;
            h_LPi[161]=0;
            h_LPi[162]=0;
            h_LPi[163]=0;
            h_LPi[164]=0;
            h_LPi[165]=0;
            h_LPi[166]=0;
            h_LPi[167]=0;
            h_LPi[168]=0;
            h_LPi[169]=0;
            h_LPi[170]=0;
            h_LPi[171]=0;
            h_LPi[172]=0;
            h_LPi[173]=0;
            h_LPi[174]=0;
            h_LPi[175]=0;
            h_LPi[176]=0;
            h_LPi[177]=0;
            h_LPi[178]=1;
            h_LPi[179]=0;
            h_LPi[180]=1;
            h_LPi[181]=0;
            h_LPi[182]=0;
            h_LPi[183]=1;
            h_LPi[184]=0;
            h_LPi[185]=0;
            h_LPi[186]=0;
            h_LPi[187]=0;
            h_LPi[188]=0;
            h_LPi[189]=0;
            h_LPi[190]=1;
            h_LPi[191]=0;
            h_LPi[192]=0;
            h_LPi[193]=0;
            h_LPi[194]=1;
            h_LPi[195]=0;
            h_LPi[196]=0;
            h_LPi[197]=0;
            h_LPi[198]=1;
            h_LPi[199]=0;
            h_LPi[200]=0;
            h_LPi[201]=0;
            h_LPi[202]=0;
            h_LPi[203]=0;
            h_LPi[204]=1;
            h_LPi[205]=0;
            h_LPi[206]=0;
            h_LPi[207]=0;
            h_LPi[208]=0;
            h_LPi[209]=1;
            h_LPi[210]=1;
            h_LPi[211]=1;
            h_LPi[212]=0;
            h_LPi[213]=0;
            h_LPi[214]=1;
            h_LPi[215]=0;
            h_LPi[216]=0;
            h_LPi[217]=0;
            h_LPi[218]=0;
            h_LPi[219]=0;
            h_LPi[220]=1;
            h_LPi[221]=0;
            h_LPi[222]=1;
            h_LPi[223]=0;
            h_LPi[224]=0;
            h_LPi[225]=0;
            h_LPi[226]=0;
            h_LPi[227]=0;
            h_LPi[228]=0;
            h_LPi[229]=0;
            h_LPi[230]=1;
            h_LPi[231]=0;
            h_LPi[232]=0;
            h_LPi[233]=0;
            h_LPi[234]=1;
            h_LPi[235]=0;
            h_LPi[236]=0;
            h_LPi[237]=1;
            h_LPi[238]=0;
            h_LPi[239]=0;
            h_LPi[240]=1;
            h_LPi[241]=1;
            h_LPi[242]=0;
            h_LPi[243]=0;
            h_LPi[244]=0;
            h_LPi[245]=1;
            h_LPi[246]=0;
            h_LPi[247]=0;
            h_LPi[248]=0;
            h_LPi[249]=0;
            h_LPi[250]=0;
            h_LPi[251]=0;
            h_LPi[252]=0;
            h_LPi[253]=0;
            h_LPi[254]=1;
            h_LPi[255]=1;
            h_LPi[256]=0;
            h_LPi[257]=1;
            h_LPi[258]=0;
            h_LPi[259]=0;
            h_LPi[260]=0;
            h_LPi[261]=0;
            h_LPi[262]=1;
            h_LPi[263]=1;
            h_LPi[264]=1;
            h_LPi[265]=0;
            h_LPi[266]=0;
            h_LPi[267]=0;
            h_LPi[268]=0;
            h_LPi[269]=1;
            h_LPi[270]=0;
            h_LPi[271]=1;
            h_LPi[272]=0;
            h_LPi[273]=1;
            h_LPi[274]=0;
            h_LPi[275]=1;
            h_LPi[276]=0;
            h_LPi[277]=1;
            h_LPi[278]=1;
            h_LPi[279]=0;
            h_LPi[280]=0;
            h_LPi[281]=0;
            h_LPi[282]=0;
            h_LPi[283]=1;
            h_LPi[284]=0;
            h_LPi[285]=0;
            h_LPi[286]=0;
            h_LPi[287]=0;
            h_LPi[288]=0;
            h_LPi[289]=0;
            h_LPi[290]=0;
            h_LPi[291]=1;
            h_LPi[292]=0;
            h_LPi[293]=0;
            h_LPi[294]=0;
            h_LPi[295]=0;
            h_LPi[296]=0;
            h_LPi[297]=1;
            h_LPi[298]=0;
            h_LPi[299]=0;
            h_LPi[300]=0;
            h_LPi[301]=0;
            h_LPi[302]=1;
            h_LPi[303]=0;
            h_LPi[304]=1;
            h_LPi[305]=1;
            h_LPi[306]=1;
            h_LPi[307]=0;
            h_LPi[308]=1;
            h_LPi[309]=1;
            h_LPi[310]=1;
            h_LPi[311]=0;
            h_LPi[312]=0;
            h_LPi[313]=0;
            h_LPi[314]=0;
            h_LPi[315]=0;
            h_LPi[316]=0;
            h_LPi[317]=0;
            h_LPi[318]=0;
            h_LPi[319]=1;
            h_LPi[320]=0;
            h_LPi[321]=0;
            h_LPi[322]=0;
            h_LPi[323]=0;
            h_LPi[324]=1;
            h_LPi[325]=1;
            h_LPi[326]=1;
            h_LPi[327]=0;
            h_LPi[328]=0;
            h_LPi[329]=0;
            h_LPi[330]=0;
            h_LPi[331]=0;
            h_LPi[332]=0;
            h_LPi[333]=0;
            h_LPi[334]=0;
            h_LPi[335]=0;
            h_LPi[336]=0;
            h_LPi[337]=0;
            h_LPi[338]=0;
            h_LPi[339]=0;
            h_LPi[340]=0;
            h_LPi[341]=0;
            h_LPi[342]=0;
            h_LPi[343]=0;
            h_LPi[344]=1;
            h_LPi[345]=0;
            h_LPi[346]=0;
            h_LPi[347]=1;
            h_LPi[348]=0;
            h_LPi[349]=0;
            h_LPi[350]=1;
            h_LPi[351]=1;
            h_LPi[352]=0;
            h_LPi[353]=0;
            h_LPi[354]=1;
            h_LPi[355]=0;
            h_LPi[356]=0;
            h_LPi[357]=1;
            h_LPi[358]=0;
            h_LPi[359]=0;
            h_LPi[360]=0;
            h_LPi[361]=0;
            h_LPi[362]=1;
            h_LPi[363]=0;
            h_LPi[364]=0;
            h_LPi[365]=0;
            h_LPi[366]=1;
            h_LPi[367]=0;
            h_LPi[368]=1;
            h_LPi[369]=0;
            h_LPi[370]=0;
            h_LPi[371]=1;
            h_LPi[372]=0;
            h_LPi[373]=0;
            h_LPi[374]=0;
            h_LPi[375]=0;
            h_LPi[376]=0;
            h_LPi[377]=0;
            h_LPi[378]=0;
            h_LPi[379]=0;
            h_LPi[380]=0;
            h_LPi[381]=1;
            h_LPi[382]=0;
            h_LPi[383]=0;
            h_LPi[384]=0;
            h_LPi[385]=0;
            h_LPi[386]=1;
            h_LPi[387]=0;
            h_LPi[388]=1;
            h_LPi[389]=0;
            h_LPi[390]=0;
            h_LPi[391]=0;
            h_LPi[392]=1;
            h_LPi[393]=0;
            h_LPi[394]=0;
            h_LPi[395]=0;
            h_LPi[396]=0;
            h_LPi[397]=0;
            h_LPi[398]=1;
            h_LPi[399]=0;
            h_LPi[400]=0;
            h_LPi[401]=1;
            h_LPi[402]=1;
            h_LPi[403]=0;
            h_LPi[404]=0;
            h_LPi[405]=0;
            h_LPi[406]=0;
            h_LPi[407]=1;
            h_LPi[408]=0;
            h_LPi[409]=0;
            h_LPi[410]=0;
            h_LPi[411]=1;
            h_LPi[412]=0;
            h_LPi[413]=1;
            h_LPi[414]=1;
            h_LPi[415]=0;
            h_LPi[416]=1;
            h_LPi[417]=0;
            h_LPi[418]=0;
            h_LPi[419]=0;
            h_LPi[420]=0;
            h_LPi[421]=0;
            h_LPi[422]=0;
            h_LPi[423]=0;
            h_LPi[424]=0;
            h_LPi[425]=0;
            h_LPi[426]=1;
            h_LPi[427]=1;
            h_LPi[428]=0;
            h_LPi[429]=0;
            h_LPi[430]=0;
            h_LPi[431]=0;
            h_LPi[432]=1;
            h_LPi[433]=1;
            h_LPi[434]=0;
            h_LPi[435]=0;
            h_LPi[436]=1;
            h_LPi[437]=0;
            h_LPi[438]=0;
            h_LPi[439]=1;
            h_LPi[440]=0;
            h_LPi[441]=1;
            h_LPi[442]=0;
            h_LPi[443]=0;
            h_LPi[444]=1;
            h_LPi[445]=0;
            h_LPi[446]=0;
            h_LPi[447]=1;
            h_LPi[448]=1;
            h_LPi[449]=1;
            h_LPi[450]=0;
            h_LPi[451]=0;
            h_LPi[452]=0;
            h_LPi[453]=0;
            h_LPi[454]=0;
            h_LPi[455]=1;
            h_LPi[456]=1;
            h_LPi[457]=1;
            h_LPi[458]=1;
            h_LPi[459]=0;
            h_LPi[460]=0;
            h_LPi[461]=0;
            h_LPi[462]=0;
            h_LPi[463]=1;
            h_LPi[464]=1;
            h_LPi[465]=1;
            h_LPi[466]=0;
            h_LPi[467]=1;
            h_LPi[468]=0;
            h_LPi[469]=0;
            h_LPi[470]=0;
            h_LPi[471]=0;
            h_LPi[472]=0;
            h_LPi[473]=1;
            h_LPi[474]=0;
            h_LPi[475]=0;
            h_LPi[476]=0;
            h_LPi[477]=0;
            h_LPi[478]=0;
            h_LPi[479]=0;
            h_LPi[480]=0;
            h_LPi[481]=1;
            h_LPi[482]=1;
            h_LPi[483]=0;
            h_LPi[484]=0;
            h_LPi[485]=1;
            h_LPi[486]=0;
            h_LPi[487]=0;
            h_LPi[488]=0;
            h_LPi[489]=0;
            h_LPi[490]=0;
            h_LPi[491]=0;
            h_LPi[492]=1;
            h_LPi[493]=0;
            h_LPi[494]=0;
            h_LPi[495]=0;
            h_LPi[496]=0;
            h_LPi[497]=0;
            h_LPi[498]=0;
            h_LPi[499]=1;
            h_LPi[500]=1;
            h_LPi[501]=0;
            h_LPi[502]=0;
            h_LPi[503]=0;
            h_LPi[504]=0;
            h_LPi[505]=1;
            h_LPi[506]=1;
            h_LPi[507]=1;
            h_LPi[508]=1;
            h_LPi[509]=0;
            h_LPi[510]=0;
            h_LPi[511]=0;
        }
    #endif

    //======================================================================================================================================================================
    //allocate device memory


    err=cudaMalloc((void **)&d_LPi, size_LPi);
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to allocate device d_LPi (error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }




    //======================================================================================================================================================================
    //copy data to device

    clock_gettime(CLOCK_MONOTONIC, &start);
      
    err=cudaMemcpy(d_LPi, h_LPi, size_LPi, cudaMemcpyHostToDevice);
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to copy the LPi from host to device (error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }

    err=cudaMemcpyToSymbol(d_LUT_VN, &LUT_VN, size_LUT);
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to copy LUT_VN from host to constant (error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }

    #ifdef CODE256
        err=cudaMemcpyToSymbol(d_LUT_CN, &LUT_CN, size_LUT_CN);
        if(err!=cudaSuccess){
            fprintf(stderr, "Failed to copy LUT_CN from host to constant (error code %d)!\n", cudaGetLastError());
            exit(EXIT_FAILURE);
        }
    #else
        err=cudaMemcpyToSymbol(d_LUT_CN, &LUT_CN, size_LUT);
        if(err!=cudaSuccess){
            fprintf(stderr, "Failed to copy LUT_CN from host to constant (error code %d)!\n", cudaGetLastError());
            exit(EXIT_FAILURE);
        }
    #endif

    //======================================================================================================================================================================
    //execute the kernel
    GPU_min_sum<<<numBlocks, threadsPerBlock>>>(d_LPi);
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to launch the kernel (error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }
    //======================================================================================================================================================================
    //copy the data from device to host
    err=cudaMemcpy(h_decoded_word , d_LPi, size_LPi, cudaMemcpyDeviceToHost);
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to copy the decoded_word from device to host (error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    } 

    clock_gettime(CLOCK_MONOTONIC, &end);
    

    //======================================================================================================================================================================
    //free the device memory

    err=cudaFree(d_LPi);
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to free the d_LPi from the device (error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }


    //======================================================================================================================================================================
    //Print Results
    #ifdef PRINT
        printf("Execution time = %lf ms\n",(end.tv_sec-start.tv_sec)*1e3+(end.tv_nsec-start.tv_nsec)*1e-6);
    #endif

    #ifdef VALIDATE
        for (int i=0; i<N ;i++){
            printf("%d\n",  h_decoded_word[i] );
        }
    #endif 


    //======================================================================================================================================================================
    //free the host memory

    err=cudaFreeHost(h_LPi);
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to free the h_LPi from the host (error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }

    err=cudaFreeHost(h_decoded_word);
    if(err!=cudaSuccess){
        fprintf(stderr, "Failed to free the h_decoded_word from the host (error code %d)!\n", cudaGetLastError());
        exit(EXIT_FAILURE);
    }

    
		
   return 0;


} 


